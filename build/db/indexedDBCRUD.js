import{DataBaseError}from"../scripts/error_handling.js";import{DBManager}from"./indexedDBSetup.js";class IndexedDBCRUD{async createTask(e){const t=await getTaskStore();new Promise((r,o)=>{const a=t.add(e);a.onsuccess=()=>r(),a.onerror=()=>o(new DataBaseError("The task could not be created"))}).catch(e=>{console.log(e)})}async readTask(){const e=await getTaskStore();new Promise((t,r)=>{const o=e.openCursor(),a=[];o.onsuccess=()=>{const e=o.result;e?(a.push(e.value),e.continue()):t(a)},o.onerror=()=>{r(new DataBaseError("The task could not be found"))}}).then(e=>console.log(e)).catch(e=>console.error(e))}async editTask(e){const t=await getTaskStore();try{t.put(e).onerror=()=>{throw new DataBaseError("The task could not be edited")}}catch(e){console.error(e)}}async deleteTask(e){const t=await getTaskStore();try{t.delete(e).onerror=()=>{throw new DataBaseError("The task could not be delete")}}catch(e){console.error(e)}}}async function getTaskStore(){let e;try{if(e=await DBManager.create(),!e)throw new DataBaseError("The database could not be created")}catch(e){return void console.error(e)}try{const t=e.transaction(["tasks"],"readwrite").objectStore("tasks");if(!t)throw new DataBaseError("Failed to create object store transaction:");return t}catch(e){return void console.error(e)}}export const IndexedDBCRUDManager=new IndexedDBCRUD;const newTask={id:Date.now(),task_decription:"learnig indexedDB"},editedTask={id:1753501956460,task_decription:"Edited task2",new_id:Date.now()};